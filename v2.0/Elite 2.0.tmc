include "target.tmh"

// Globals
int wingman_selection_keys;
char selected_wingman;

int FSD_commands;
char FSD_mode;	// 1 => hyperspace, 2 => supercruise, 3 => wing nav lock

int countermeasure_commands;
char selected_countermeasure;

int main() {
	// Which physical devices we have
	Configure(&HCougar, MODE_EXCLUDED);
	Configure(&T16000, MODE_EXCLUDED);
	Configure(&LMFD, MODE_EXCLUDED);
	Configure(&RMFD, MODE_EXCLUDED);

	// Check for bullshit
	if (Init(&EventHandle)) return 1;

	// Configure devices
	SetKBRate(32, 50);
	SetKBLayout(KB_ENG);

	// Configure axes
	MapAxis(&Joystick, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Joystick, JOYX, 0, 0, 0, 0, 0);
	MapAxis(&Joystick, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Joystick, JOYY, 0, 0, 0, 0, 0);
	MapAxis(&Throttle, THR_RIGHT, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Throttle, THR_RIGHT, 0, 0, 0, 0, 0);
	MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Throttle, THR_LEFT, 0, 0, 0, 0, 0);
	MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Throttle, THR_FC, 0, 0, 0, 0, 0);
	
	// Configure nipple
	MapAxis(&Throttle, SCX, MOUSE_X_AXIS, AXIS_NORMAL, MAP_RELATIVE);
	SetSCurve(&Throttle, SCX, 0, 0, 0, 20, -5);
	MapAxis(&Throttle, SCY, MOUSE_Y_AXIS, AXIS_NORMAL, MAP_RELATIVE);
	SetSCurve(&Throttle, SCY, 0, 0, 0, 20, -5);
	
	MapKey(&Throttle, SC, MOUSE_LEFT);

	// Configure buttons
	SetShiftButton(0, 0, &Throttle, BSF, BSB, 0);

	MapKeyIOUMD(&Throttle, CSU, DX22, DX22, DX22, DX22, PULSE+KP8, PULSE+KP8);
	MapKeyIOUMD(&Throttle, CSD, DX24, DX24, DX24, DX24, PULSE+KP2, PULSE+KP2);
	MapKeyIOUMD(&Throttle, CSR, DX23, DX23, DX23, DX23, PULSE+KP6, PULSE+KP6);
	MapKeyIOUMD(&Throttle, CSL, DX25, DX25, DX25, DX25, PULSE+KP4, PULSE+KP4);

	MapKeyIOUMD(&Throttle, CHF, PULSE+'y', PULSE+'y', PULSE+'y', PULSE+'y', PULSE+'y', PULSE+'y');
	MapKeyIOUMD(&Throttle, CHB, PULSE+'h', PULSE+'h', PULSE+'h', PULSE+'h', PULSE+'h', PULSE+'h');

	MapKey(&Throttle, EORMOTOR, PULSE+HOME);
	MapKey(&Throttle, EORNORM, PULSE+HOME);
	MapKeyIOUMD(&Throttle, EORIGN, PULSE+END, PULSE+END, PULSE+END, PULSE+END, PULSE+END, PULSE+END);

	MapKeyIOUMD(&Throttle, LDGH, PULSE+'l', PULSE+'l', PULSE+'l', PULSE+'l', PULSE+'l', PULSE+'l');

	MapKeyIOUMD(&Throttle, EACON, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS);
	MapKeyRIOUMD(&Throttle, EACON, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS);
	
	MapKey(&Throttle, RDRNRM, PULSE+L_SHIFT+'\'');
	MapKey(&Throttle, RDRDIS, PULSE+L_SHIFT+'\'');
	
	// Configure switches
	MapKey(&Throttle, APUON, PULSE+L_CTL+L_ALT+'g'); //Enable/disable UI
	MapKey(&Throttle, APUOFF, PULSE+L_CTL+L_ALT+'g'); //Enable/disable UI
	MapKey(&Throttle, EFROVER, DX1); //Primary hardpoint enable switch
	MapKey(&Throttle, EFLOVER, DX6); //Secondary hardpoint enable switch
	
	//Left engine switch doesn't have an obvious use, but
	MapKey(&Throttle, EOLIGN, DX22);	//Lateral thrusters up, because when landed on planets
										//that's as close to engines on as we can get
	MapKey(&Throttle, EOLMOTOR, DX4); 	//Flight assist off because that's as close
										//to engines off as we can get
	
	// Countermeasure management
	countermeasure_commands = LIST(0, 'z', 'x', 'c'); //Chaff, heatsink, shield cell
	selected_countermeasure = 2; //Switch rests naturally in the middle position
	
	MapKey(&Throttle, BSF, EXEC("selected_countermeasure = 1;"));
	MapKey(&Throttle, BSM, EXEC("selected_countermeasure = 2;"));
	MapKey(&Throttle, BSB, EXEC("selected_countermeasure = 3;"));
	
	MapKey(&Throttle, SPDB, EXEC(
		"ActKey(fire_countermeasure_code());"
	));

	// Wingman management
	wingman_selection_keys = LIST(0, '7', '8', '9'); // 0 is dummy
	selected_wingman = 1;
	
	MapKey( &Throttle, PSB, EXEC("selected_wingman = 1;") );
	MapKey( &Throttle, PSM, EXEC("selected_wingman = 2;") );
	MapKey( &Throttle, PSF, EXEC("selected_wingman = 3;") );

	// Target wingman's target
	MapKey( &Joystick, H2D, EXEC(
		"ActKey( CHAIN("
		"	target_selected_wingman_code(),"
		"	D(),"
		"	KEYON+PULSE+'0'"
		") );"
	) );

	// FSD mode management
	FSD_commands = LIST(
		0, // dummy
		CHAIN(KEYON+PULSE+R_SHIFT, KEYON+PULSE+'k'),
		KEYON+PULSE+'k',
		0 // must be computed at runtime
	);
	FSD_mode = 2;	// default to supercruise

	// Autopilot PATH => FSD wingman nav lock
	MapKey( &Throttle, APPAT, EXEC("FSD_mode = 3;") );
	// Autopilot ALT/HDG => FSD supercruise
	MapKey( &Throttle, APAH, EXEC("FSD_mode = 2;") );
	// Autopilot ALT => FSD hyperspace
	MapKey( &Throttle, APALT, EXEC("FSD_mode = 1;") );

	// What to do on autopilot engage
	MapKey( &Throttle, APENG, EXEC(
		"if (FSD_mode == 3) {"
		"	ActKey( CHAIN(target_selected_wingman_code(), D(), KEYON+PULSE+'-') );"
		"} else {"
		"	ActKey( X(FSD_commands, FSD_mode) );"
		"}"
	) );
}

int fire_countermeasure_code() {
	return KEYON+PULSE+X(countermeasure_commands, selected_countermeasure);
}

int target_selected_wingman_code() {
	return KEYON+PULSE+X(wingman_selection_keys, selected_wingman);
}

int EventHandle(int type, alias o, int x) {
	DefaultMapping(&o, x);
}


