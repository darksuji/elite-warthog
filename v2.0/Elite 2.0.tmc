include "target.tmh"

// Globals
int wingman_selection_keys;
char selected_wingman;

char FSD_mode;	// 1 => hyperspace, 2 => supercruise, 3 => wing nav lock

int main()
{
	Configure(&HCougar, MODE_EXCLUDED);
	Configure(&T16000, MODE_EXCLUDED);
	Configure(&LMFD, MODE_EXCLUDED);
	Configure(&RMFD, MODE_EXCLUDED);
	if(Init(&EventHandle)) return 1;
	SetKBRate(32, 50);
	SetKBLayout(KB_ENG);
	SetShiftButton(0, 0, &Throttle, BSF, BSB, 0);
	MapKeyIOUMD(&Joystick, H3U, DX11, DX11, DX11, DX11, PULSE+KP8, PULSE+KP8);
	MapKeyIOUMD(&Joystick, H3R, DX12, DX12, DX12, DX12, PULSE+KP6, PULSE+KP6);
	MapKeyIOUMD(&Joystick, H3D, DX13, DX13, DX13, DX13, PULSE+KP2, PULSE+KP2);
	MapKeyIOUMD(&Joystick, H3L, DX14, DX14, DX14, DX14, PULSE+KP4, PULSE+KP4);
	MapAxis(&Joystick, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Joystick, JOYX, 0, 0, 0, 0, 0);
	MapAxis(&Joystick, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Joystick, JOYY, 0, 0, 0, 0, 0);
	MapKeyIOUMD(&Throttle, CHF, PULSE+'y', PULSE+'y', PULSE+'y', PULSE+'y', PULSE+'y', PULSE+'y');
	MapKeyIOUMD(&Throttle, CHB, PULSE+'h', PULSE+'h', PULSE+'h', PULSE+'h', PULSE+'h', PULSE+'h');
	MapKeyIOUMD(&Throttle, EORMOTOR, HOME, HOME, HOME, HOME, HOME, HOME);
	MapKeyIOUMD(&Throttle, LDGH, PULSE+'l', PULSE+'l', PULSE+'l', PULSE+'l', PULSE+'l', PULSE+'l');
	MapKeyIOUMD(&Throttle, EACON, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS);
	MapKeyRIOUMD(&Throttle, EACON, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS, PULSE+INS);
	MapKeyIOUMD(&Throttle, EORIGN, PULSE+END, PULSE+END, PULSE+END, PULSE+END, PULSE+END, PULSE+END);
	MapAxis(&Throttle, SCX, DX_XROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Throttle, SCX, 0, 0, 0, 0, 0);
	MapAxis(&Throttle, SCY, DX_YROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Throttle, SCY, 0, 0, 0, 0, 0);
	MapAxis(&Throttle, THR_RIGHT, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Throttle, THR_RIGHT, 0, 0, 0, 0, 0);
	MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Throttle, THR_LEFT, 0, 0, 0, 0, 0);
	MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Throttle, THR_FC, 0, 0, 0, 0, 0);

	// Wingman management
	wingman_selection_keys = LIST(0, '7', '8', '9'); // 0 is dummy
	selected_wingman = 1;
	
	MapKey( &Throttle, PSB, EXEC("selected_wingman = 1;") );
	MapKey( &Throttle, PSM, EXEC("selected_wingman = 2;") );
	MapKey( &Throttle, PSF, EXEC("selected_wingman = 3;") );

	// Target wingman's target
	MapKey( &Joystick, H2D, EXEC(
		"ActKey( CHAIN("
		"	KEYON+PULSE+X(wingman_selection_keys, selected_wingman),"
		"	D(),"
		"	KEYON+PULSE+'0'"
		") );"
	) );

	// FSD mode management
	FSD_mode = 2;	// default to supercruise
			// FIXME:  figure out how to poll the device to do this right

	// Autopilot PATH => FSD wingman nav lock
	MapKey( &Throttle, APPAT, EXEC("FSD_mode = 3;") );
	// Autopilot ALT/HDG => FSD supercruise
	MapKey( &Throttle, APAH, EXEC("FSD_mode = 2;") );
	// Autopilot ALT => FSD hyperspace
	MapKey( &Throttle, APALT, EXEC("FSD_mode = 1;") );

	// What to do on autopilot engage
	MapKey( &Throttle, APENG, EXEC(
		"if (FSD_mode == 1) {"
		"	ActKey( CHAIN(KEYON+PULSE+R_SHIFT, KEYON+PULSE+'k') );"
		"} else if (FSD_mode == 2) {"
		"	ActKey( KEYON+PULSE+'k' );"
		"} else if (FSD_mode == 3) {"
		"	ActKey( CHAIN(KEYON+PULSE+'7', D(), KEYON+PULSE+'-') );"
		"}"
	) );
}

int EventHandle(int type, alias o, int x)
{
	DefaultMapping(&o, x);
}


